# SPDX-FileCopyrightText: 2025 Swiss Confederation
#
# SPDX-License-Identifier: MIT

name: Retag Docker Image
run-name: Retag ${{ github.repository }}:${{ inputs.source_tag }} -> ${{ inputs.target_tag }}

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: "Existing tag (version) to use as source"
        required: true
        type: string
      target_tag:
        description: "Target tag"
        required: true
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'rc'
          - 'stable'
        default: 'dev'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  retag:
    runs-on: ubuntu-latest
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate source tag exists
        id: validate
        run: |
          set -euo pipefail
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.source_tag }}"
          if ! docker buildx imagetools inspect "${IMAGE_REF}" > /dev/null 2>&1; then
            echo "Source tag '${{ inputs.source_tag }}' not found." >&2
            exit 1
          fi
          SRC_DIGEST=$(docker buildx imagetools inspect "${IMAGE_REF}" | awk '/Digest:/ {print $2; exit}')
          echo "src_digest=${SRC_DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Abort if target equals source
        if: ${{ inputs.source_tag == inputs.target_tag }}
        run: echo "Source and target tag are identical. Nothing to do."

      - name: Pull, retag, push
        if: ${{ inputs.source_tag != inputs.target_tag }}
        id: retag
        run: |
          set -euo pipefail
          SRC_TAG='${{ inputs.source_tag }}'
          TGT_TAG='${{ inputs.target_tag }}'
          IMAGE='${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}'
          echo "Pulling ${IMAGE}:${SRC_TAG}" >&2
          docker pull "${IMAGE}:${SRC_TAG}"
          echo "Tagging ${IMAGE}:${SRC_TAG} as ${IMAGE}:${TGT_TAG}" >&2
          docker tag "${IMAGE}:${SRC_TAG}" "${IMAGE}:${TGT_TAG}"
          echo "Pushing ${IMAGE}:${TGT_TAG}" >&2
          docker push "${IMAGE}:${TGT_TAG}"
          TGT_DIGEST=$(docker buildx imagetools inspect "${IMAGE}:${TGT_TAG}" | awk '/Digest:/ {print $2; exit}')
          echo "tgt_digest=${TGT_DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Show result
        run: |
          echo "Source digest: ${{ steps.validate.outputs.src_digest }}"
          if [ "${{ inputs.source_tag }}" != "${{ inputs.target_tag }}" ]; then
            echo "Target digest: ${{ steps.retag.outputs.tgt_digest }}"
          fi
          echo "Done. Tag '${{ inputs.target_tag }}' now points to version '${{ inputs.source_tag }}'."
