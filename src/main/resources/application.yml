application:
  external-url: "${EXTERNAL_URL}"
  client_id: "${VERIFIER_DID}"
  client_id_scheme: "did"
  client_name: "${VERIFIER_NAME}"
  logo_uri: "${VERIFIER_LOGO}"
  signing_key: "${secret.signing_key:${SIGNING_KEY}}"
  signing-key-verification-method: "${DID_VERIFICATION_METHOD}"

  key-management-method: "${SDJWT_SIGNING_KEY_MANAGEMENT_METHOD:key}"
  hsm:
    user-pin: "${secret.key.sdjwt.hsm.pin.user:${SDJWT_HSM_USER_PIN:}}"
    # Key identifier or alias, or label when using pkcs11-tool
    key-id: "${secret.key.sdjwt.hsm.id:${SDJWT_HSM_KEYID:}}"
    # Optional pin to unlock the key
    key-pin: "${secret.key.sdjwt.hsm.pin.key:${SDJWT_HSM_KEY_PIN}}"
    # File Path to the HSM config file. For settings see https://docs.oracle.com/en/java/javase/21/security/pkcs11-reference-guide1.html
    pkcs11-config: "${SDJWT_HSM_CONFIG_PATH:}"

    # For Cloud HSM like eg. securosys
    user: "${SDJWT_HSM_USER:}"
    host: "${SDJWT_HSM_HOST:}"
    password: "${SDJWT_HSM_PASSWORD:}"
    port: "${SDJWT_HSM_PORT:}"
    proxy-user: "${SDJWT_HSM_PROXY_USER:}"
    proxy-password: "${SDJWT_HSM_PROXY_PASSWORD:}"

  url-rewrite:
    mapping: "${URL_REWRITE_MAPPING:{}}"

spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: org.postgresql.Driver
    url: "${POSTGRES_JDBC}"
    username: "${secret.db.username:${POSTGRES_USER}}"
    password: "${secret.db.password:${POSTGRES_PASSWORD}}"
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate # verifier-agent-management is owner of schema, so we just validate if it matches

management:
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health, info

logging:
  level:
    ch.admin.bj.swiyu: INFO
    ch.admin.bj.swiyu.verifier.oid4vp.infrastructure.web.config.RequestLoggingFilter: DEBUG
