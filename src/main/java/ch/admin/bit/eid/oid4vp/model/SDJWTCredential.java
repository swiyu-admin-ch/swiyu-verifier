package ch.admin.bit.eid.oid4vp.model;

import ch.admin.bit.eid.oid4vp.model.persistence.ManagementEntity;
import com.authlete.sd.Disclosure;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import lombok.extern.slf4j.Slf4j;

import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.time.Instant;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

@Slf4j
public class SDJWTCredential extends CredentialBuilder {

    private final String publicKeyString = "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEQgjeqGSdu+2jq8+n78+6fXk2Yh22\nlQKBYCnu5FWPvKtat3wFEsQXqNHYgPXBxWmOBw5l2PE/gUDUJqGJSc1LuQ==\n-----END PUBLIC KEY-----\n";
    private final String tokenString = "eyJ0eXAiOiJ2YytzZC1qd3QiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJkaWQ6ZXhhbXBsZToxMjM0NTY3ODkiLCJfc2QiOlsiNFF0REs3bC1KS2dBWU9SaHVna3lQNWx1RXJzQzNpblVkNlZUTXFBYXc3RSIsIkNVYUtnbmFRWEpKcDJvS0kxVDhwaW1meUYwSUZ0TzA3TWY3Rm8weVlBVGsiLCJEbFJEa1FKeVlpaFd6VFZqZzVvdjNEQm9UVnpaX3k2RVRUR2dPei0zazNvIiwiRHQyLVRuLXVqcGowLTI3WXJQWWU5VVlnQzZJN1dOQ2VXX3ozRDhTWDN4USIsIkdlbWFhYUtKb1hJbFkwSG5tNVh5VGZIWF84cXRnYXdOa1RuZjI2MFFWenMiLCJLVTdORWRlTzR5U1Q2RHdPWlhrRGFZUUI5Z3FsMWM4Y1F2cWJ3c2NmdXY0IiwiTldreHhQQy1wUC1IS0ZQcmF3Z3R5bGxLOEZHZy1YeUFzWVZLUF81UzVvZyIsIk5tbmxnU2MwS2t1WFp1T3VUaXFiTDNma0tFaFNNOG95NnJPUWFaZFYwRkkiLCJPcmRLUDhIcGNOYWNpSldmNFAtMUdMYlI1Q3RQVS1IUE9zZ0dPYnNNMDc4IiwiUFNSUmlpd0t3by1SbExCT215OVU5bUFRNXhGVXdHTjJWU0hCa2lHLVQxNCIsIlE2RllIOHJxLTI0UFFDU2xQZ01ra2xqa3lGeGhlZV93ZDRWckZTZVRRamMiLCJVOWtCQjVyWXJaR2hRM25Ddmd2ZExXaG51MkJuZExxeW1VRXN1VHNIWnlzIiwiV29wSGw5bkhyWmY3d2NWd0tiQVBXempTNTBreGFYR0ZFQ0hwUXZUcXhjRSIsIlhaMWF5cVFpdDhNdEpUUGZOYXd2LV9ObDExbkE1QWx2YjBycHJndDg5Q0kiLCJsUmpZZ2w5UUpZVU5sLXJrdGRYb0JzVmpoYUVEcERtZEx6aVJlTFNWLUQ0IiwiblFOTXV2RDFNTmZNV0xWYWI3U29XRjZFc2t6OEQ4Ym9SeGhQdnhoR0ExYyIsInpHWU9zT0JYY25NdjQteTZmcUhucGQzUjlyU0QwM3NTeW40Z0dfeDJORUkiXSwiaWF0IjoxNzIzMTAzMjM4fQ.miEAXvMAq_wEwWNjnipkVFF_biw5N-jUmWcoLkrNKIg5NlBZ8uvumXXaRW5sOACYHsQ5jlwM4kO8a2oSAUD65A~WyJFU0lDeHMxbk11b1ByWkY0OXUyVkRRIiwibGFzdE5hbWUiLCJNdXN0ZXIiXQ~WyJ2a1FCOXIwek5lSTlTRGxWY0hSYmdRIiwiaXNzdWVyRW50aXR5IiwiU3RyYXNzZW52ZXJrZWhyc2FtdCBBUiJd~WyJxQ3ltek92RWw5M2laNmsxT0ZMcXNnIiwiaG9tZXRvd24iLCJIZXJpc2F1Il0~~WyJXQ3d5bl9pM3ZkV1BGYlFoMjh2T2JRIiwicmVzdHJpY3Rpb25zQSIsIjAxLjAyIl0~WyJiblNaWU5qTUpCeGpoM29pSDRnOS1RIiwicmVzdHJpY3Rpb25zQiIsIjA1LjA4Il0~WyJfU2dEVE5UZHJyVm1pa3J3Y2d3NkFBIiwiY2F0ZWdvcnlSZXN0cmljdGlvbnMiLCIwMSJd~WyJlSENyVFZwUUZOaHFINEg3amM5M0VnIiwiZGF0ZU9mQmlydGgiLCIyMS4xMC4yMDAyIl0~WyJ2TlUwenA5RDU3NlBScHpnVmZNRFJ3IiwiY2F0ZWdvcnlDb2RlIiwiQiJd~~WyJrQ3VkNkNLQk9fWkd3N0ZseUNlRVJBIiwiZmlyc3ROYW1lIiwiU2VyYWluYSJd~WyItaGk4YktIX0loanlwNGJjN09mUWRBIiwiaXNzdWVyRW50aXR5RGF0ZSIsIjIwLjEwLjIwMjMiXQ~WyJvbkxwXzBGd2M3X1NTbC00cndkSWd3IiwiY3JlZGVudGlhbE51bWJlciIsIjI3MyJd~WyJYcG52YmtiRG1xcmpVWUJvUHFoLWh3IiwiZmFiZXJQaW4iLCIxMjM0NTY3ODkiXQ~WyI3aXVCazlVN29VbXVFYkpxekhqMld3IiwiZGF0ZU9mRXhwaXJhdGlvbiIsIjAxLjAzLjIwMjUiXQ~WyJTSnh0QlRZdTJ5UGZ3RC1ndXZrNXJnIiwicmVnaXN0cmF0aW9uTnVtYmVyIiwiMjMxNCJd~WyJGUGdQRlk0Vnp6QXg2RUcxaXJFY09BIiwic2lnbmF0dXJlSW1hZ2UiLCJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBU3dBQUFESUNBSUFBQURkdlVzQ0FBQUFBWE5TUjBJQXJzNGM2UUFBQUFSblFVMUJBQUN4and2OFlRVUFBQUFKY0VoWmN3QUFGaVVBQUJZbEFVbFNKUEFBQUFucVNVUkJWSGhlN2QxUmdxSTZFSVhoV1pjTGNqMnVwamZqWXVZRzVMWktLcVFxSVI1Ry91OXRab1RFcWh3RXBIdisvQVVnUlFnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0VFQkFqaElBWUlRVEVDQ0VnUmdnQk1VSUlpQkZDUUl3UUFtS0NFTjUvYnJmcjlYSzUvSG1UL3VKeXZkNXVQL2Y3OGtMZ0ZENFl3aFMrNnlwNFpaZHJTdU95NGJiNzIxNHZWK2Rtd0ZGOEpvUXBmKzc0dlVwUnJFVHE1N3E4OU9sUzJ3WTRsQStFOE40V3dNVjJwSXdNa2tMOFkwYUhzQytCQ1NIRXR4c2J3bElFTC9NbDMxdFU3dmY1aGszKyt1dlA4Z29MSWRSWVhWNVE4UzRqUTJoSHNOcXdsTWJyODlacDVlVmNFeXBrVmFmbVBRYUcwTXBnb0ZsVEZOTVdteCtFazNSUWZvNlRQbUs1T3pvZUlkelZ1QkFhR2FSVlg0SVE3bXBZQ01uZ0Z5T0V1eG9Xd3Z4aWpVWjlEVUs0SzBLSU9FSzRLMEtJT0VLNHF3K0dzSDZqVThaOHBueDZvSHg2bm54NXpSRHo4N1J2d3o0ZVk5L25LZmI3L1NmdGZ4cGdmWDArL2RVMFRPTzcrODRRdm44M3RpeUFUL3c4d1NkdnpJeEo0ZU9iakYrWFcyU1EwRVBsdHRMNlc3NWlXYXkvT25FTVhIOXd0aVQycmh4ZjY5amYrUG9VNi9PK3ovQzdmWDl3dnp6TzAxWkgzdi90emZnRHpMQVFXaCtGSTJMWWZsRGVxSHRJWWNEMXhKNXZQVEp3Y0FXMHY2ZXRnWG95V05wenZzL2cyb2czdnRpUjdmY1hiRUdEY1NHMFU3ajdXMm9NWWQrNmVsTVlzTkR5K01EdWl0a0Y5eXNPOU5VaHJMNDVkLzJiRFF4aGNWSHMrbFJMdkJkSmNibE9WMG9QMldWVVVXSHhXQzF2WE0ydVpWRFo5M1FWT0Z2K2JDb005TVVoTEs2RUoxZjF1NHdNNFZiejVrdmU1V1ZkNHIwd0MyOGZHTkxGbGZFT2x0VzhLRjJEWmkyL1pmdWFyOGFldzA2UHNCZk9KaDBMd1NoMitjWkNjYVRDUU9rczk5WHk0bGZMditRSzlUbEVDTmQvc3hSc010M1NlcnpSNEx3YURBMmh1VEpldlMvQ0p1RmVXSXQxYzVOc0JGOVhzczNlcGNWcEQycGYxdFZUK1BxK2ZJZTROTkx5K2hmMWdaSncwWE1IQ09IS251ZG5NWU5EbU5SdkZYUjlLa1o3a1hlaTN2eHN3WGpXeTBiTGE4dkZPblRWbC9tOFZiQ1d4a2llUE1VRGtEbFlDSFVKVE1hSE1ISGRzbXVNWXJBWFdlOTl5MmM5aW1PclVzdGRBemFHbzBFK1RVY1lna1czSENtRWcwcnI5cEVRSnQ1NzUrRW9CbnV4ZnJtei9nM1pOVnZ1YnJlUnd1QWlkY29IY3N3eEhvRE1jVUlZbi92ZVBoWENpZjg3NU9JRlV5N1dpNnoxM3M1bncxUTNORm9lV1daTjRXZ1JYOHh0MjZ3Y0pZU0RxaHJ5eVJETzVtZURsZ0pzY242UkVldUZNb1RCZHZkdTc1V1Z4REhPRG5NN1JnZ0gxVFRvNHlGOGNFWng5L1h3RDRXd2U1VTZuVG1FWXlvYUpncmhZb3BpSll1MTBzWjYwYkxpSmczYkVjSk5Sd2hoZk5aamFFUDRVTGxXM0M1VnNMTFp5MTJ0YjFreHZTM2ZNNFR6bDgvSmJYa2M2TTE2R01jOGQxak9oUERwQ0NHYzJRK25QR3dWSzFyWmxrNWsyM2dXVEcvTHUxZnBmR3dyMXJTc3BTREI5NVlRd3FmRGhIQ1dkMlpSYmxDNHN0a0dsZlpiejVWNDFrdHZ5OXRYcWY4dXRNa3h6eDJXTXlGOE9sWUlrMElPaXgxcXFHeTJTV0ovS1dMZlB2TDFycmZsYmF1MGVCanpjOHh6aCtWTUNKOE9GOExFRGttaFhrMlZ0VWFZT1g2S3d0dTUzcFkzckZMbmx6OFZqbm51c0p3SjRkTVJRMmdlemtzdGFxaHN0a21BZjZYMHRqeTZTcTJpUFZ3ZS8rdGo0Vkg1YkR2SFBIZFl6b1R3NlpBaHRHSlNLbGk0c3NhK25TNmhaZExiOHVBcU5kK1c1NEVIUWloM3pCRG1IU29XTEZqWjljdXY4OCtOTFg4b2N6Nis4NnEzNWFGVmFoUXN2ZHcxSGlHVU8xY0kxL3Y5N2Z2ajUybFgxNEhwengyLytPeVRJVFRxNVY3UzJiYU9lUTRKWVhBZmhIQ3dyRnpsUlJXcTdPckZ3V052VEcvTEl5SE02K1YvYTZJUWR1OGp2djBlc3g3aVg3a3hVNnhYcExLci9ZN3RRVy9MdTBJWUdLc2xoQzNickdWekRoMFQ4NjNyYytqdHlEQkhER0dvd0pIS1pxOGQrVkhZMi9KQUNQT1hCc2JhSllRTmxjejM0ZDZKc1dsU25mZkpRamhYcWZGSDVhMEtiMVFyVWxsejE5ZnVYM05qKzJBSTg3SGM2OW40YXRFeHozeHVEZXM1bjdScjFsWVRaOVVwbkN1RUwzV0svczRUb3pQYnhRcFZ0dGpBRi9PdkNQdmY4czM5L0J2amcySHRiWGtraE1iN2Nxem53bytUZWVhWnQ2bGhRVnU5cmt4N3E0SFZHZlIyWkpqUklYeElxN202aEl0UFBHNlhLbGhacS9FaG5yY3k2MjE1SklUeDlienh2THhubmxZWUhMRmZNWnRSSEg3OWUrL1hxdlB1N2Nnd253bmhyN1NFYjQ4UGxWOC8wMy9HVXE1dXJWRGh5aGFPL3pIcGJkVDY5OUVRMmlXM1QwTnF6M2U3NW1ubjUvWDR0SHpyRXo1MlRPYUpyL2EwL05PdjdQZTRWdWQ5cmhBV2l4dFdQN28yVmJaOGxJallubHh2eTJNaDNLcjU4NnphZWlEMmNsdDlLUHJtNlcveDV2NGFWOHIwSU1LNlFOVjU5M1prbURFaDNHV1ZwK1Bxc3JjdDhjcGFjMXN1QWFPVDNocXJ0K1hSRURZdDZIbE9xNUc4OC9RT1Y5bGZlTmJUNSsyMElTR3NxNTMxYkFuY3pnbFcxa2hncFJYektYUHhqTGtjak42V3gwTTQxZHhmOHVjWmRXTUl2Zm1wVGpzdzY5ZkxBRUxvWlovUGw3bnZlL3h2MWNIeS93MHh5VmZOY2xSMU1SZExzWkdoaVZuU1dlTGJEbHduQnRPNDFZTFBSVjVlUG5sYnp0NXhIbXAzU3p5SGprazlpT3RKcjZhZEdsRWJxTHNqbzR3TzRhLzVEc3pXL3hyN2VpaytSc3RueTBxK2kvZytQbUkrK0syZmhrMTFIdkpmRHh0anpVME50L1J4eXBGUGV2alMwUHBZQ1BXeWo4R20rQnoybkFiL3JQT0VjSjhNRWtMczdqUWh6RTRrMjhLend5a3Q4TzY4SWVSc0ZBZHg0dFBSaGhUbSt5Q0Q2SGFlRUJvM05rTVJpbjFCQWJpZEo0Um1DcFA1RHZqeUVsdnhtemNpaUQyY0tJVFcyZVNyK2F1dFY5TmZMUDltNFk0TTluR3FFQlkvRGNPeXB6ZUFaaWNMWVZKL1FLcUNBR0pmNXd2aHpQR0FaUzZkclg3NTgxT1FPR2tJZnoyZWFKMHYvNHhRVG4rYi92WDJ3MmNmeGpsN0NBRTVRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCTVFJSVNCR0NBRXhRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCTVFJSVNCR0NBRXhRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCTVFJSVNCR0NBRXhRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCTVFJSVNCR0NBRXhRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCTVFJSVNCR0NBRXhRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCTVFJSVNCR0NBRXhRZ2lJRVVKQWpCQUNZb1FRRUNPRWdCZ2hCS1QrL3YwUGZwS01SY0NEMXRFQUFBQUFTVVZPUks1Q1lJSVx1MDAzZCJd~";
    // TODO check what should be supported
    private final List<String> suggestedAlgorithms = List.of("ES256");

    @Override
    // follows https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#section-8.1-4.3.2.4
    public ManagementEntity verifyPresentation() {

        Jwt<?, ?> jwt;
        var publicKey = loadPublicKey();

        // Separates SD-JWT into the Issuer-signed JWT and the Disclosures
        String[] parts = tokenString.split("~");
        var issuerSignedJWTToken = parts[0];

        Jws<Claims> claims = Jwts.parser()
                .verifyWith(publicKey)
                .build()
                .parseClaimsJws(issuerSignedJWTToken);

        // check signature
        try {
            jwt = parseAndValidateJWT(issuerSignedJWTToken, publicKey);

            // Checks if the presentation is expired and if it can already be used
            var header = jwt.getHeader();

            if (!suggestedAlgorithms.contains(header.getAlgorithm()) || !Objects.equals(header.getType(), "vc+sd-jwt")) {
                throw new Exception("Unsupported algorithm: " + header.getAlgorithm());
            }

            Claims payload = claims.getPayload();

            var disclosures = Arrays.copyOfRange(parts, 1, parts.length - 1);
            var digests = Arrays.stream(disclosures).map(this::getDigestForDisclosure).toList();

            // todo test 2 mal s gliiche
            // todo check If any Disclosure was not referenced by digest value in the Issuer-signed JWT (directly or recursively via other Disclosures), the SD-JWT MUST be rejected.
            if (!digests.stream().allMatch(dig -> Collections.frequency(payload.get("_sd", List.class), dig) == 1)) {
                throw new Exception("Could not verify JWT problem with disclosures and _sd field");
            }

            Long exp = payload.get("exp", Long.class);
            Long nbf = payload.get("nbf", Long.class);

            if (nbf != null && Instant.now().isBefore(Instant.ofEpochSecond(nbf))) {
                throw new Exception("Could not verify JWT presentation is not yet valid");
            }

            if (exp != null && Instant.now().isAfter(Instant.ofEpochSecond(exp))) {
                throw new Exception("Could not verify JWT presentation is expired");
            }

        } catch (Exception e) {
            log.warn(e.getMessage());
        }

        return null;
    }

    // From https://www.baeldung.com/java-jwt-token-decode
    private Jwt<?, ?> parseAndValidateJWT(String token, PublicKey publicKey) throws Exception {

        JwtParser jwtParser = Jwts.parser()
                .verifyWith(publicKey)
                .build();

        try {
            Jwt<?, ?> test = jwtParser.parseSignedClaims(token);
            return test;
        } catch (Exception e) {
            // raise CredentialInvalidError
            throw new Exception("Could not verify JWT token integrity!", e);
        }
    }

    private PublicKey loadPublicKey() {
        try {
            var sanitized = publicKeyString.replaceAll("\n", "").replace("-----BEGIN PUBLIC KEY-----", "").replace("-----END PUBLIC KEY-----", "");
            byte[] encoded = Base64.getDecoder().decode(sanitized);
            KeyFactory kf = KeyFactory.getInstance("EC");
            EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);
            return kf.generatePublic(keySpec);
        } catch (Exception e) {
            log.error("Failed to load public key", e);
            return null;
        }
    }

    private String getDigestForDisclosure(String disclosureString) {
        return Disclosure.parse(disclosureString).digest();
    }

    // TODO test
    /*
    For example, the SHA-256 digest of the Disclosure WyI2cU1RdlJMNWhhaiIsICJmYW1pbHlfbmFtZSIsICJNw7ZiaXVzIl0 would be uutlBuYeMDyjLLTpf6Jxi7yNkEF35jdyWMn9U7b_RYY.
     */
}
