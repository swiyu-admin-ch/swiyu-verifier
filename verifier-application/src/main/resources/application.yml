# SPDX-FileCopyrightText: 2025 Swiss Confederation
#
# SPDX-License-Identifier: MIT

application:
  external-url: "${EXTERNAL_URL:}"
  client_id: "${VERIFIER_DID:}"
  client_id_scheme: "did"
  signing_key: "${secret.signing_key:${SIGNING_KEY:}}"
  signing-key-verification-method: "${DID_VERIFICATION_METHOD:}"
  client-metadata-file: "${OPENID_CLIENT_METADATA_FILE:}"
  # Schema of the generated deeplink. Keep in mind that the wallet must support this.
  # iOS is not capable of letting the user choose between the apps being opened by the schema.
  # the standard is openid-credential-offer
  # default for swiss ecosystem is swiyu://
  # It is not recommended to change this value unless you want to use this issuer in a different ecosystem.
  deeplink-schema: ${DEEPLINK_SCHEMA:swiyu-verify}

  key-management-method: "${SIGNING_KEY_MANAGEMENT_METHOD:key}"
  # Pin to unlock the hsm
  hsm:
    user-pin: "${secret.key.hsm.pin.user:${HSM_USER_PIN:}}"
    # Key identifier or alias, or label when using pkcs11-tool
    key-id: "${secret.key.hsm.id:${HSM_KEY_ID:}}"
    # Optional pin to unlock the key
    key-pin: "${secret.key.hsm.pin.key:${HSM_KEY_PIN:}}"
    # File Path to the HSM config file. For settings see https://docs.oracle.com/en/java/javase/21/security/pkcs11-reference-guide1.html
    pkcs11-config: "${HSM_CONFIG_PATH:}"

    # For Cloud HSM like eg. securosys
    # User for logging in on the host
    user: "${HSM_USER:}"
    # URI of the HSM Host or Proxy to be connected to
    host: "${HSM_HOST:}"
    # Password for the Host
    password: "${HSM_PASSWORD:}"
    # Port for either the proxy or host
    port: "${HSM_PORT:}"
    # When using a proxy with username / password authentication
    proxy-user: "${HSM_PROXY_USER:}"
    proxy-password: "${HSM_PROXY_PASSWORD:}"

  url-rewrite:
    mapping: "${URL_REWRITE_MAPPING:{}}"
  accepted-status-list-hosts:
    - "status-reg.trust-infra.swiyu-int.admin.ch"
    - "status-reg.trust-infra.swiyu.admin.ch"

  # ---- OpenID4VP Part ----

  # TTL is set to 900 seconds -> 15 minutes
  verification-ttl: ${VERIFICATION_TTL_SEC:900}
  # Clearing interval is set to 60k * 7 = 420k -> 7minutes
  # to make sure the data is cleared before the TTL expires
  # which is more than twice as long
  data-clear-interval: ${DATA_CLEAR_PROCESS_INTERVAL_MS:420000}

verification:
  # the acceptable window of the issued at claim for verification - used for determining if the holder key binding proof jwt is valid
  acceptable-proof-time-window-seconds: ${VERIFICATION_PROOF_TIME_WINDOW_MS:120}
  object-size-limit: 204800 # 200 Kibibyte


spring:
  http:
    client:
      read-timeout: 10s # 10 seconds for reading the response
      connect-timeout: 5s # 5 seconds until tcp handshake is done
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: org.postgresql.Driver
    url: "${POSTGRES_JDBC}"
    username: "${secret.db.username:${POSTGRES_USER}}"
    password: "${secret.db.password:${POSTGRES_PASSWORD}}"
  flyway:
    enabled: true
    locations: classpath:db/migration/common
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate # verifier-agent-management is owner of schema, so we just validate if it matches

springdoc:
  swagger-ui:
    path: swagger-ui.html
    csrf:
      enabled: true
  show-actuator: true

management:
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health, info, prometheus

logging:
  level:
    ch.admin.bj.swiyu: INFO
    ch.admin.bj.swiyu.verifier.infrastructure.web.config.RequestLoggingFilter: DEBUG

monitoring:
  basic-auth:
    enabled: ${MONITORING_BASIC_AUTH_ENABLED:false}
    username: "${MONITORING_BASIC_AUTH_USERNAME:}"
    password: "${MONITORING_BASIC_AUTH_PASSWORD:}"