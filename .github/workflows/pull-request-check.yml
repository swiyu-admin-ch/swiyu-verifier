# SPDX-FileCopyrightText: 2025 Swiss Confederation
#
# SPDX-License-Identifier: MIT

# Inspired by https://thomasthornton.cloud/2025/03/18/setting-up-trivy-in-your-github-actions/
name: Pull Request Check
run-name: ${{ github.repository }} is evaluating pull request
on: [pull_request]

permissions:
  actions: read
  security-events: write
  contents: read
  packages: write
  attestations: write
  id-token: write
  pull-requests: write  # allow coverage comment

jobs:
  docker-security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          config-file: ./.github/codeql/codeql-config.yml
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Build & test with Maven (produce JaCoCo)
        run: mvn --batch-mode clean verify -DskipTests=false
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"
      - name: Upload JaCoCo reports
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-reports
          path: |
            verifier-service/target/site/jacoco/jacoco.xml
            verifier-service/target/site/jacoco/index.html
            verifier-application/target/site/jacoco/jacoco.xml
            verifier-application/target/site/jacoco/index.html

      - name: Setup Node.js (for coverage summary script)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Add coverage to summary
        run: node .github/scripts/coverage-summary.js

      - name: Run PMD static analysis
        uses: pmd/pmd-github-action@v2
        id: pmd
        with:
          rulesets: '.github/rulesets/java/pmd_omni_ruleset.xml'

      - name: Upload PMD SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif

      - name: Build and push docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          pull: true # Prevent old images to be used, which may trigger CVE findings
          tags: pull_request_check:latest
          build-args: SOURCE_IMAGE=eclipse-temurin:21-jre-ubi9-minimal
          file: Dockerfile

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: pull_request_check:latest
          severity: 'CRITICAL,HIGH'
          exit-code: 1
          ignore-unfixed: true
          format: table

  application-tests:
    name: Trigger external application tests
    needs: docker-security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Dispatch to swiyu-generic-application-test
        env:
          GH_TOKEN: ${{ secrets.APPLICATION_TESTS_DISPATCH_TOKEN }}
          TARGET_REPO: swiyu-admin-ch/swiyu-generic-application-test
          EVENT_TYPE: verifier-updated
        run: |
          set -euo pipefail
          if [ -z "${GH_TOKEN}" ]; then
            echo "ERROR: Secret APPLICATION_TESTS_DISPATCH_TOKEN is not set." >&2
            exit 1
          fi
          echo "Sending repository_dispatch '${EVENT_TYPE}' to ${TARGET_REPO}"
          payload=$(jq -n \
            --arg repo "swiyu-verifier" \
            --arg ref "${{ github.ref }}" \
            --arg sha "${{ github.sha }}" \
            --arg pr "${{ github.event.pull_request.number }}" \
            '{event_type: "'${EVENT_TYPE}'", client_payload: {repo: $repo, ref: $ref, sha: $sha, pr_number: $pr}}')
          curl -sSf -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            https://api.github.com/repos/${TARGET_REPO}/dispatches \
            -d "${payload}"
          echo "Dispatch sent."
      - name: Summary
        run: |
          {
            echo "### Application tests triggered";
            echo "- External repo: ${TARGET_REPO}";
            echo "- Event type: ${EVENT_TYPE}";
            echo "- PR: #${{ github.event.pull_request.number }}";
            echo "- Ref: ${{ github.ref }}";
            echo "- SHA: ${{ github.sha }}";
            echo "";
            echo "NOTE: External workflow currently uses image tag 'main'; it will not yet test this PR's image."
          } >> $GITHUB_STEP_SUMMARY
